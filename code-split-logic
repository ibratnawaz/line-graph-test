// index.js â€” bootstrap only, everything else is dynamic

// still include your global styles and CSS frameworks here:
import 'bootstrap/dist/css/bootstrap.min.css';
import './index.scss';

(async () => {
  // 1) Dynamically load vendor libs
  const [
    { default: React },
    { createRoot },
    { BrowserRouter }
  ] = await Promise.all([
    import('react'),
    import('react-dom/client'),
    import('react-router-dom')
  ]);

  // 2) Then load your application
  const { default: App } = await import('./App');

  // 3) Mount your app
  const rootElement = document.getElementById('app');
  if (!rootElement) {
    console.error('RENDER ERROR: Root element not found!');
    return;
  }
  const root = createRoot(rootElement);
  root.render(
    // Uncomment StrictMode if you like
    // <React.StrictMode>
      React.createElement(
        BrowserRouter,
        null,
        React.createElement(App, null)
      )
    // </React.StrictMode>
  );
})();


////////////////////////////////////////////////

import { useEffect, useTransition } from 'react';

function App() {
  const [, startTransition] = useTransition();

  useEffect(() => {
    // 1) Wait for the browser to be idle (after paint)
    const handle =
      typeof window.requestIdleCallback === 'function'
        ? window.requestIdleCallback
        : (cb: () => void) => {
            // fallback to next tick
            const id = window.setTimeout(cb, 0);
            return () => clearTimeout(id);
          };

    const cancel = handle(() => {
      // 2) Now schedule your filters update at low React priority
      startTransition(() => {
        setFilters(initFilters);
      });
    });

    return () => {
      // cleanup if unmounted early
      cancel();
    };
  }, []); // run once, after first mount

  return <YourAppUI />;
}

