// index.js — bootstrap only, everything else is dynamic

// still include your global styles and CSS frameworks here:
import 'bootstrap/dist/css/bootstrap.min.css';
import './index.scss';

(async () => {
  // 1) Dynamically load vendor libs
  const [
    { default: React },
    { createRoot },
    { BrowserRouter }
  ] = await Promise.all([
    import('react'),
    import('react-dom/client'),
    import('react-router-dom')
  ]);

  // 2) Then load your application
  const { default: App } = await import('./App');

  // 3) Mount your app
  const rootElement = document.getElementById('app');
  if (!rootElement) {
    console.error('RENDER ERROR: Root element not found!');
    return;
  }
  const root = createRoot(rootElement);
  root.render(
    // Uncomment StrictMode if you like
    // <React.StrictMode>
      React.createElement(
        BrowserRouter,
        null,
        React.createElement(App, null)
      )
    // </React.StrictMode>
  );
})();


////////////////////////////////////////////////

useEffect(() => {
    // 1) Create an `idleCallback` helper that always returns a cancellation fn
    const idleCallback = (() => {
      if (typeof window.requestIdleCallback === 'function') {
        return (cb: () => void) => {
          // schedule on idle
          const id = window.requestIdleCallback(cb);
          // return a fn that cancels that idle callback
          return () => window.cancelIdleCallback(id);
        };
      } else {
        return (cb: () => void) => {
          // fallback to a zero‑delay timeout
          const id = window.setTimeout(cb, 0);
          // return a fn that clears that timeout
          return () => window.clearTimeout(id);
        };
      }
    })();

    // 2) Use it. It’ll always give you back a `cancelIdle` function.
    const cancelIdle = idleCallback(() => {
      // now that the browser is idle (and has painted),
      // schedule your filters update as a low‑priority React update:
      startTransition(() => {
        setFilters(initFilters);
      });
    });

    // 3) Clean up if the component unmounts early
    return () => {
      cancelIdle();
    };
  }, []);

